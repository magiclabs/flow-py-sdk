import unittest

from magic_flow_python.cadence import Address, String, Int
from magic_flow_python.tx import Tx, TxSignature, ProposalKey


class TestTx(unittest.TestCase):
    def test_transaction_rlp_encoding_is_consistent(self):
        cases = [
            {
                "name": "Complete transaction",
                "tx": base_tx(),
                "payload": "f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001c9880000000000000001",
                "envelope": "f899f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Empty reference block",
                "tx": base_tx().with_reference_block_id(b"\0" * 32),
                "payload": "f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a000000000000000000000000000000000000000000000000000000000000000002a880000000000000001040a880000000000000001c9880000000000000001",
                "envelope": "f899f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a000000000000000000000000000000000000000000000000000000000000000002a880000000000000001040a880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Zero gas limit",
                "tx": base_tx().with_gas_limit(0),
                "payload": "f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b80880000000000000001040a880000000000000001c9880000000000000001",
                "envelope": "f899f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b80880000000000000001040a880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Empty proposal key ID",
                "tx": base_tx().with_proposal_key(
                    proposal_key=ProposalKey(
                        key_id=0,
                        key_address=Address.from_hex("01"),
                        key_sequence_number=10,
                    )
                ),
                "payload": "f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001800a880000000000000001c9880000000000000001",
                "envelope": "f899f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001800a880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Empty sequence number",
                "tx": base_tx().with_proposal_key(
                    proposal_key=ProposalKey(
                        key_id=4,
                        key_address=Address.from_hex("01"),
                        key_sequence_number=0,
                    )
                ),
                "payload": "f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8800000000000000010480880000000000000001c9880000000000000001",
                "envelope": "f899f872b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8800000000000000010480880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Multiple authorizers",
                "tx": base_tx().add_authorizers(Address.from_hex("02")),
                "payload": "f87bb07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001d2880000000000000001880000000000000002",
                "envelope": "f8a2f87bb07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207dc0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001d2880000000000000001880000000000000002e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Single argument",
                "tx": base_tx().add_arguments(String("foo")),
                "payload": "f892b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207de09f7b2274797065223a22537472696e67222c2276616c7565223a22666f6f227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001c9880000000000000001",
                "envelope": "f8b9f892b07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207de09f7b2274797065223a22537472696e67222c2276616c7565223a22666f6f227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
            {
                "name": "Multiple arguments",
                "tx": base_tx().add_arguments(String("foo"), Int(42)),
                "payload": "f8afb07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207df83c9f7b2274797065223a22537472696e67222c2276616c7565223a22666f6f227d9b7b2274797065223a22496e74222c2276616c7565223a223432227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001c9880000000000000001",
                "envelope": "f8d6f8afb07472616e73616374696f6e207b2065786563757465207b206c6f67282248656c6c6f2c20576f726c64212229207d207df83c9f7b2274797065223a22537472696e67222c2276616c7565223a22666f6f227d9b7b2274797065223a22496e74222c2276616c7565223a223432227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a880000000000000001040a880000000000000001c9880000000000000001e4e38004a0f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162",
            },
        ]

        for case in cases:
            with self.subTest(msg=case["name"]):
                tx = case["tx"]
                payload = tx.payload_message().hex()
                envelope = tx.envelope_message().hex()

                self.assertEqual(case["payload"], payload)
                self.assertEqual(case["envelope"], envelope)


def base_tx() -> Tx:
    sig = bytes.fromhex(
        "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
    )
    tx = (
        Tx(
            code="""transaction { execute { log("Hello, World!") } }""",
            reference_block_id=bytes.fromhex(
                "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b"
            ),
            proposal_key=ProposalKey(
                key_id=4, key_address=Address.from_hex("01"), key_sequence_number=10
            ),
            payer=Address.from_hex("01"),
        )
        .with_gas_limit(42)
        .add_authorizers(Address.from_hex("01"))
    )

    signature = TxSignature(
        address=Address.from_hex("01"), key_id=4, signer_index=0, signature=sig
    )
    tx.payload_signatures.append(signature)
    return tx


if __name__ == "__main__":
    unittest.main()
